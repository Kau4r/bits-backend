generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  User_ID           Int           @id @default(autoincrement())
  User_Role         UserRole      @default(STUDENT)
  Approved_Bookings Booked_Room[] @relation("BookingApprover")
  First_Name        String
  Middle_Name       String
  Last_Name         String
  Email             String        @unique
  Password          String
  Created_At        DateTime      @default(now())
  Updated_At        DateTime      @updatedAt
  Is_Active         Boolean       @default(true)

  // Relations
  Audit_Log                         Audit_Log[]
  Booked_Room                       Booked_Room[]
  Booking_Booking_Approver_IDToUser Booking[]        @relation("Booking_Approver_IDToUser")
  Booking_Booking_User_IDToUser     Booking[]        @relation("Booking_User_IDToUser")
  Borrow_Item                       Borrow_Item[]
  Borrowing_Comp                    Borrowing_Comp[]
  Form_Form_Approver_IDToUser       Form[]           @relation("Form_Approver_IDToUser")
  Form_Form_Creator_IDToUser        Form[]           @relation("Form_Creator_IDToUser")
  Item                              Item[]
  CreatedTickets                    Ticket[]         @relation("Ticket_User")

  AssignedTickets Ticket[] @relation("TicketTechnician")

  // New relations for room and schedule management
  Opened_Rooms      Room[]     @relation("RoomOpenedBy")
  Created_Schedules Schedule[] @relation("ScheduleCreatedBy")
  
  // Notification relations
  ReceivedNotifications Notification[] @relation("NotificationRecipient")
  SentNotifications     Notification[] @relation("NotificationSender")
}

model Item {
  Item_ID   Int    @id @default(autoincrement())
  Item_Code String @unique
  Item_Type String @default("GENERAL")

  Brand         String?
  Serial_Number String?
  Status        ItemStatus
  Created_At    DateTime   @default(now())
  Updated_At    DateTime

  // Relations
  Booking     Booking[]
  Borrow_Item Borrow_Item[]
  Computers   Computer[]    @relation("ComputerItems")

  ReplacedById Int?  @unique
  ReplacedBy   Item? @relation("ItemReplacement", fields: [ReplacedById], references: [Item_ID])
  Replaces     Item? @relation("ItemReplacement")

  Room_ID Int?
  Room    Room? @relation(fields: [Room_ID], references: [Room_ID])
  User_ID Int?
  User    User? @relation(fields: [User_ID], references: [User_ID])

  Tickets Ticket[]

  @@index([Item_Code])
  @@index([Status])
  @@index([Room_ID])
}

model Ticket {
  Ticket_ID Int @id @default(autoincrement())

  Reported_By_ID Int
  Reported_By    User  @relation("Ticket_User", fields: [Reported_By_ID], references: [User_ID])
  Item_ID        Int?
  Item           Item? @relation(fields: [Item_ID], references: [Item_ID])

  Report_Problem String

  Room_ID  Int?
  Room     Room?   @relation(fields: [Room_ID], references: [Room_ID])
  Location String?

  Status        TicketStatus    @default(PENDING)
  Technician_ID Int?
  Technician    User?           @relation("TicketTechnician", fields: [Technician_ID], references: [User_ID])
  Priority      TicketPriority?
  Category      TicketCategory?

  AuditLogs Audit_Log[] @relation("TicketAuditLogs")

  Created_At DateTime @default(now())
  Updated_At DateTime @updatedAt
  Archived   Boolean  @default(false)
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum TicketPriority {
  HIGH
  MEDIUM
  LOW
}

enum TicketCategory {
  HARDWARE
  SOFTWARE
  FACILITY
  OTHER
}

enum NotificationType {
  // System Alerts (Yellow)
  ITEM_SCHEDULE_ENDING
  ROOM_FULL
  ROOM_QUEUE
  
  // Form Updates (Green)
  FORM_UPDATE_REMINDER
  FORM_COMPLETED
  FORM_APPROVED
  
  // System Notifications (Blue)
  COMPUTER_USAGE
  ITEM_BORROWED
  ROOM_BOOKED
  
  // Issues/Reports (Red)
  ITEM_REPORTED
  COMPUTER_REPORTED
  TICKET_UPDATED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Notification {
  id          Int              @id @default(autoincrement())
  type        NotificationType
  title       String
  message     String
  priority    NotificationPriority @default(MEDIUM)
  isRead      Boolean          @default(false)
  relatedId   Int?             // ID of related entity (e.g., booking ID, ticket ID)
  relatedType String?          // Type of related entity (e.g., 'booking', 'ticket')
  
  // Recipient (null means broadcast to all)
  recipientId Int?
  recipient   User?            @relation("NotificationRecipient", fields: [recipientId], references: [User_ID])
  
  // Sender (null means system-generated)
  senderId    Int?
  sender      User?            @relation("NotificationSender", fields: [senderId], references: [User_ID])
  
  createdAt   DateTime         @default(now())
  readAt      DateTime?
  
  @@index([recipientId, isRead])
  @@index([type, relatedId, relatedType])
}

model Form {
  Form_ID                     Int      @id @default(autoincrement())
  Creator_ID                  Int
  Approver_ID                 Int?
  Title                       String
  Content                     String
  Status                      String
  Created_At                  DateTime @default(now())
  Updated_At                  DateTime
  User_Form_Approver_IDToUser User?    @relation("Form_Approver_IDToUser", fields: [Approver_ID], references: [User_ID])
  User_Form_Creator_IDToUser  User     @relation("Form_Creator_IDToUser", fields: [Creator_ID], references: [User_ID])
}

model Booking {
  Booking_ID                     Int         @id @default(autoincrement())
  User_ID                        Int
  Approver_ID                    Int?
  Item_ID                        Int
  Booking_Date                   DateTime    @default(now())
  Start_Date                     DateTime
  End_Date                       DateTime
  Status                         String
  Created_At                     DateTime    @default(now())
  Updated_At                     DateTime
  User_Booking_Approver_IDToUser User?       @relation("Booking_Approver_IDToUser", fields: [Approver_ID], references: [User_ID])
  Item                           Item        @relation(fields: [Item_ID], references: [Item_ID])
  User_Booking_User_IDToUser     User        @relation("Booking_User_IDToUser", fields: [User_ID], references: [User_ID])
  AuditLogs                      Audit_Log[] @relation("BookingAuditLogs")
}

enum RoomStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  RESERVED
  CLOSED
}

enum ScheduleType {
  CLASS
  FACULTY_USE
  STUDENT_USE
  MAINTENANCE
  SPECIAL_EVENT
}

enum RoomType {
  CONSULTATION
  LECTURE
  LAB
}

model Room {
  Room_ID          Int           @id @default(autoincrement())
  Name             String
  Room_Type        RoomType      @default(LAB)
  Capacity         Int
  Status           RoomStatus    @default(AVAILABLE)
  Current_Use_Type ScheduleType? // Current type of use (if any)
  Opened_By        Int? // User_ID of the lab tech who opened the room for student use
  Opened_At        DateTime? // When the room was opened for student use
  Closed_At        DateTime? // When the room was closed
  Created_At       DateTime      @default(now())
  Updated_At       DateTime      @updatedAt
  Booked_Room      Booked_Room[]
  Items            Item[]
  Schedule         Schedule[]
  Computers        Computer[]
  Tickets          Ticket[]

  // Relations
  Opened_By_User User? @relation("RoomOpenedBy", fields: [Opened_By], references: [User_ID])
}

model Schedule {
  Schedule_ID   Int          @id @default(autoincrement())
  Room_ID       Int
  Schedule_Type ScheduleType // Type of schedule (CLASS, FACULTY_USE, etc.)
  Title         String // Title/description of the schedule
  Start_Time    DateTime
  End_Time      DateTime
  Days          String       @default("1,2,3,4,5") // Comma-separated days (1=Monday, 7=Sunday)
  IsActive      Boolean      @default(true)
  IsRecurring   Boolean      @default(true) // If false, this is a one-time schedule
  Created_By    Int // User_ID who created the schedule
  Created_At    DateTime     @default(now())
  Updated_At    DateTime     @updatedAt

  // Relations
  Room            Room          @relation(fields: [Room_ID], references: [Room_ID])
  Created_By_User User          @relation("ScheduleCreatedBy", fields: [Created_By], references: [User_ID])
  Bookings        Booked_Room[]

  @@map("Schedule")
}

enum LogType {
  TICKET
  BOOKING
  BORROWING
  SYSTEM
}

model Audit_Log {
  Log_ID   Int     @id @default(autoincrement())
  Log_Type LogType @default(SYSTEM)
  Action   String
  Details  String? // For storing notification messages
  
  // Notification specific fields
  Is_Notification      Boolean   @default(false)
  Notification_Read_At DateTime?
  Notification_Type    String?   // e.g., 'BOOKING_REMINDER', 'FORM_APPROVAL', etc.
  Notification_Data    Json?     // Additional notification-specific data

  // Optional user reference (null for system-generated logs)
  User_ID Int? // Made optional with '?'
  User    User? @relation(fields: [User_ID], references: [User_ID])

  // Related entities (optional, for tracking specific items)
  Ticket_ID Int? // For TICKET logs
  Ticket    Ticket? @relation("TicketAuditLogs", fields: [Ticket_ID], references: [Ticket_ID])

  Booking_ID Int? // For BOOKING logs
  Booking    Booking? @relation("BookingAuditLogs", fields: [Booking_ID], references: [Booking_ID])

  Borrowing_ID Int? // For BORROWING logs
  Borrowing    Borrow_Item? @relation("BorrowingAuditLogs", fields: [Borrowing_ID], references: [Borrow_Item_ID])
  
  // Timestamps
  Created_At DateTime @default(now())
  Updated_At DateTime @updatedAt
  
  // Timestamp for when the log was created
  Timestamp DateTime @default(now())

  // Add indexes for better query performance
  @@index([Log_Type])
  @@index([User_ID])
  @@index([Ticket_ID])
  @@index([Booking_ID])
  @@index([Borrowing_ID])
  @@index([Is_Notification, User_ID, Notification_Read_At])
  @@index([Action, Created_At])
  @@index([Notification_Type, Created_At])
}

model Booked_Room {
  Booked_Room_ID Int       @id @default(autoincrement())
  Room_ID        Int
  User_ID        Int
  Start_Time     DateTime
  End_Time       DateTime
  Status         String    @default("PENDING")
  Created_At     DateTime  @default(now())
  Updated_At     DateTime  @updatedAt
  Approved_By    Int? // User_ID of the approver
  Notes          String? // For approval/rejection notes
  Purpose        String?
  Schedule_ID    Int?
  Room           Room      @relation(fields: [Room_ID], references: [Room_ID])
  Schedule       Schedule? @relation(fields: [Schedule_ID], references: [Schedule_ID])
  User           User      @relation(fields: [User_ID], references: [User_ID])
  Approver       User?     @relation("BookingApprover", fields: [Approved_By], references: [User_ID])

  @@map("Booked_Room")
}

model Borrow_Item {
  Borrow_Item_ID Int         @id @default(autoincrement())
  User_ID        Int
  Item_ID        Int
  Borrow_Date    DateTime    @default(now())
  Return_Date    DateTime
  Status         String
  Created_At     DateTime    @default(now())
  Updated_At     DateTime
  Item           Item        @relation(fields: [Item_ID], references: [Item_ID])
  User           User        @relation(fields: [User_ID], references: [User_ID])
  AuditLogs      Audit_Log[] @relation("BorrowingAuditLogs")
}

model Borrowing_Comp {
  Borrowing_Comp_ID Int      @id @default(autoincrement())
  User_ID           Int
  Computer_ID       Int
  Borrow_Date       DateTime @default(now())
  Return_Date       DateTime
  Status            String
  Created_At        DateTime @default(now())
  Updated_At        DateTime
  Computer          Computer @relation(fields: [Computer_ID], references: [Computer_ID])
  User              User     @relation(fields: [User_ID], references: [User_ID])
}

model Computer {
  Computer_ID    Int              @id @default(autoincrement())
  Name           String
  Created_At     DateTime         @default(now())
  Updated_At     DateTime         @updatedAt
  Status         ComputerStatus   @default(AVAILABLE)
  Room_ID        Int?
  Room           Room?            @relation(fields: [Room_ID], references: [Room_ID])
  Borrowing_Comp Borrowing_Comp[]
  Items          Item[]           @relation("ComputerItems")
}

enum UserRole {
  LAB_HEAD
  LAB_TECH
  FACULTY
  STUDENT
  SECRETARY
  ADMIN
}

enum ItemStatus {
  AVAILABLE
  BORROWED
  DEFECTIVE
  LOST
  REPLACED
}

enum ComputerStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  DECOMMISSIONED
}
